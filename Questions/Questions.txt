---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q datastructure types and the differences between each other  such as array, array list, and linked list accoriding to access, add, and remove
Data structure           
	- Definitino
		- A way of organizing and storing data in a computer to perform operation on that effieciently

	- Types
		- Primitive	=> Integers, Floats, Characters, etc		(basic)
		- Linear		=> Arrays, Linkedlists, Stacks, and Queues	(Arranged in linear order)
		- Non-linear	=> Trees, Graphs				(Not arranged in a squential manner)

	- Operation
		- Traversal 
		- Insertion
		- Deletion
		- Searching
		- Sorting
		- Merging
	
	- Array 		=> Access by Index	, 	fixed, inefficient insertion, deletion in the middle	
	- LinkedLists	=> Nodes and pointers	dynamic size, squential access, additional memory for pointers
	- Stack		=> LIFO			push, pop, peek(access top without removal)
	- Queues		=> FIFO			Enqueue, Dequeue, Front(Access Front element)
	- Trees		=> Hierarchial with root node	
	- Graphs		=> Nodes and edges
	- Hashing		=> Technique that maps data to a fixed-size array, 
	- Time and space Complexity	
		- Analyzing the efficiency of algorithms and data structures in terms of time and space complexity(amount of memory)
		- Big O Notation Expresses the worst-case scenario for how the runtime or space requirements of an algorithms grow as the input size increase 
	- Choosing the right data structure
          - which is most used in datastructure
                    - Arrays:           Used for storing elements of the same type in contiguous memory locations.
                    - Linked Lists:     Used for dynamic memory allocation and efficient insertion/deletion operations.
                    - Stacks:           LIFO (Last In, First Out) data structure used for various applications like expression evaluation, function call management, etc.
                    - Queues:           FIFO (First In, First Out) data structure used for tasks such as task scheduling, breadth-first search, etc.
                    - Trees:            Hierarchical data structures with nodes connected by edges, commonly used in various applications like hierarchical data representation, searching, sorting, etc. Examples include binary trees, AVL trees, B-trees, etc.
                    - Graphs:           Non-linear data structures consisting of nodes and edges, used for modeling relationships between entities in various real-world scenarios like social networks, transportation networks, etc.
                    - Hash Tables:      Data structures that implement an associative array abstract data type, used for efficient retrieval of key-value pairs.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------          
- Algorithms search binary self organized and selection and 
	- Sort med quick selection insertion bubble
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
- Solid Prniciples
	- Single Responsbility
		- A class should focus on doing one thing (one job or resopnsibility)
	- Open for Extension/Closed for Modification
		- A class should be open for extension and closed for modification
	- Liskov Substitution
		- Objects of a superclass should be replacable with objects of a subclass without affecting the correctness of the program
	- Interface Segregation Principle
		- A Client should never be forced to implement interfaces it does not use 
		- the Dependency of on class on another should be kept to the minimum necessary
	- Dependency Inversion Principle
		- High-Level modules should not depend on low-level modules but should depend on abstractions
		- Abstrctions should not depend on details, details should depend on abstractions
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q overload(static (compile-time) binding) and overwrite(dynamic (run-time) binding) & abstract class and interface
Q Abstract and interface Comaprison
Q new(static), virtual(dynamic), override(dynamic), sealed	

- OOP     
          - Encapsulation
		- Is the bundling of data and methods that operate on that data into a single unit
		- Involves hiding the internal details of an object and exposing only what is necessary
		
	- Abstration
		- Is the process of simplifying complex systems by modeling classes based on the essential features while hiding the unnecessary details
	- Inheritance
		- Is a mechanism that allows a class(subclass or derived claas to inherit the properties and behaviors of another class )
		- Promotes code Reusability and establish is-a relationship
	- Polymorphism
		- Allow objects of different types to be treated as objects of a common base type 
		
		- Compile Time ( Static )
			- Method Overloading
				- Methods with the same name but different in the signature 
			- Operator Overloading
				- Allow to redefine the behavior of operators for user-defined types
			- Compile-Time Decision
				- the specific method or operator to be called is determined at compile time based on the number and types of arguments
		- Run Time ( Dynamic )
			- Method Overriding
				- this is a form of runtime polymorphism where a method in a base class is redefined in a derived class with the same signature
			- Polymorphism Behavior
				- The actual method called is determined by the type of the object at runtime 
				- This allows you to write code that can work with objects of a base class but will behave differently based on the actual derived class instance
			- Late Binding
				- The decision about which method to call is deferred until runtime allowing for greater flexibility

partial is the ability for classes to work in separate files
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
design pattern define and types and type for each type
	- what are the use cases for each 
	- like singleton why use it and the purpose and where to use it like in appsettings
          
decorator design pattern

Design Pattern
	- Creational Patterns	=> Deals with object creation mechanisms
		- Singleton Pattern
			- Creational Design Pattern 
			- Single Creation for an object like static data or static resources
				- Like Configurations => Json file or xml file or database 
				- need to read it only onetime
				- if updated it's ok to restart the application to feel the changes (modifying configuration is something unique)
				
	- Structural Patterns	=> Focus on the composition of classes and object to create larger structures
		- Adapter Pattern
			- Structural pattern
			- Allows incompatible interfaces by converting the interface of a class into another interface that a client expects
			
	- Behavioral Patterns	=> Define how objects interact and communicate with each other 
		- 

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------                    
- Async and Await
          - Enable async programming by writing async keyword before the function and must use await with a method that fetch data or do something
	- wait the method until it completes the execution
	- thread is free to do other work
	- non blocking, ensures that the method not block instead of waiting idly
          
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
- value type and reference type
          - Struct is a value type whether we included a non-primitive type inside it or not
          
- boxing and unboxing
- implicit and explicit casting
- downcasting and upcasting
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
Struct and enum in the memory
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Scope transient singleton
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
JSON
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------		
datatypes differents 
          - const & readonly 
                    - if we tried to reassign it
          - static and dynamic variable
          - dictionary and hashtable
          - accociative array => datastructure that stores key-value pairs => refers to the dictionary and hashtable
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
.NET Architecture
	- CLR CIL/IL and so on
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------          
- What is Dependdency Injection
	- Injecting the dependencies into a class rather than creating them internally
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
- What is API
- Put vs batch
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
SQL 

          - transaction
          - joins
          - functions, views, triggers, stroedprocedures
	indexes index types and which column could I apply the index 
	how to optimize the query like reduce views, using indexing
	primary key and foreign key 
	
	how to access some data like accessing the project which connected the department that connected to the epmloyee using joins orally
	joins types and the differences between each other and what is self join in what case could we use it 
	functions, stored procedures, views, and triggers
          meaning of the transaction 
          
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
