---------------------------------------------------------------------------
|    |       Web               |     Mobile            |     Desktop      |
|----|-------------------------|-----------------------|------------------|
|    |                         |                       |                  |
|UI  |       [HTML+CSS+JS]     |     [XML + Andriod]   |     WPF          |
|    |                         |                       |                  |
|Code|       C#                |     Java              |     C#           |   
|    |                         |                       |                  |
|DB  |       MSQLS             |     SQLLite           |     SQLExpress   |   
|    |                         |                       |                  |
---------------------------------------------------------------------------

[RESTful API]
	- Is an Interface that two computer systems use to exchange information securely over the internet.
	
[API]
	- (Application Prgramming Interface)
	- Rules that you must follow to communicate with other software systems (actions, endpionts, ...)
	

[Web API]
	- An API that is accessible over the web using stardard web protocols (http/https) 
	- Follow the principles of REST or other architectural styles for web services
	
	[Client]
		- want to access information from the web, like accessing weather data from a weather system
		
	[Resources]
		- the infromation that differet applications provide to their clients
		
	- APIs help them to determine which clients get access to specific internal resources 
	
	
	- presentation and models + bussiness on the same machine (Local Deployment) => called API
	- models + bussness on a seperated server 	=> Web API

[REST]

	- A software architecture that imposes condition on how API should work
	- APIs that follow the REST architectural style are called REST APIs
	- Web Services that implement REST architecture are called RESTful web services
	- The term RESTful API generally refers to RESTfful web APIs and we can use both REST API, RESTful API interchangeably
	
	
	[REST Principles]
		
		- [Stateless Communication]
			- all the information needed to understand and fulfill that request must be provided on every request
		
		- [Uniform Interface]
			- the server transfer data in a standard format, like storing data as text but send it in an html representation format
			
			- [Uniform interface imposes four architectural]                                                  
				- Request should identify resources, they do so by using a uniform resource identifier URI / (URL + URN), Uniform Resource Identifier/Locator/Name
					- 'https://example.com/api/books/123'
				- Clients have enough information in the resource representation to modify or delete the resource if they want to
					- {"id":12, "title":"somethine"}	response body 
				- Self-Descriptive message and metadata
					- the server include metadata in the HTTP headers to make the response self-descriptive. For example, the 'Content-Type'
					- HTTP/1.1 200 OK     Content-Type: application/json
					
				- Infromation about Processing Representations
					- the server might include additinoal information in the headers such as how long the client can cache the response
					- HTTP/1.1 200 OK     Content-Type: application/json      Cache-Control: max-age=3600
					
				- Hyperlinks and Dynamic Resource Discovery
					- the server could include hyperlinks to related resources for instance, it might provide a linke to the author's details or similar books
		
		[Layered system]
			- the client can connect to other authorized intermediaries between the client and server, and it will still receive responses from the server

		[Cacheability]
			- RESTful web services support caching, which is the process of storing some responses on the client or on an intermediary to improve server response time
			
		[Code on demand]
			- servers can temporarily extend or custmomize client functinoality by transferring software programming code to the client
			- like validation on the client side which is a code sent by the server 
				
				
	[Why RESTful APIs]
		- [Scalability] [Flexibility] [Independence]
	
	
	[RESTful APIs workflow]
		- client sends request to the server 
		- server authenticates the client and comfirms that the client has the right to make that request 
		- the server receives the request and processes it internally
		- the server returns a response to the client 

		
	[RESTful API client request contain]
		
		- [Request Line]
			- 'GET /example/resource HTTP/1.1'
		
			- [URI]
				- The server identifies each resource with unique resource identifiers, using a URL(Uniform Resource Locator)
				- URL also called a request endpoint			
			
			- [HTTP Methods] (verbs)			
				- GET
				- POST
				- PUT
				- DELETE
				
			-[HTTP Version]
				- e.g, HTTP/1.1
		
		- [HTTP Headers]
			- Data      
				- might include data for the POST, PUT, and other HTTP methods to work successfully
				
			- Parameters
				- RESTful API can include parameters that give the server more details about what needs to be done
					- Path parameter that specify URL details
					- Query parameters that request more informaion about the resource
					- Cookie parameters that authenticate clients quickly
					
					
	[RESTful API authentication methods]
	
		- [HTTP Authentication]
			
			- [Basic Authentication]
				- the client sends the user name and password in the request header. 
				- It encodes them with base64, which is an encoding technique that converts the pair into a set of 64 characters for safe transmission
			
			- [Bearer Authentication]
				- The process of giving access control to the token bearer.
				- The bearer token is typically an encrypted string of characters that the servergenerates in response to a login request.
				- The client sends the token in the request headers to access resources
				
		- [API Keys]
			- The server assigns a unique generated value to a first-time client.
			- Whenever the client tries to access resources, it uses the unique API Key to verify itself
			- API Key are less secure because the client has to transmit the key, which makes it vulnerable to network theft
			
		- [OAuth]
			- OAuth combines passwords and tokens for highly secure login access to any system.
			- The server first requests a password and then asks for an additional token to complete the authorization process
			- It can check the token at any time and also over time with a specific scope and longevity
			
			
	[RESTful API server response contain]
	
		- [Status Line]
			- 200 Ok (success)
			- 201 Ok (Post method Success)
			- 400 Incorrect request 
			- 404 Resource not found 
		
		- [Message body]
			- Contains the resource representation
			- The server selects an appropriate representation format based on what the request headers contain
			- Clients can request infromation in XML or JSON formats, which define how the data is written in plain text.
			- if the client request the name and age of a person named John, the server returns a JSON {"name":"John","age":30}
			
		- [Header]
			- the resonponse contains metadata about the response
			- Provide more informatino (metadata) such as the server, encoding, date, and content type
			
		- [Additional Info]
			- Could obtain additional information

      
[Web Service]
		- Is a software system that designed to support  interoperable machine-to-machine communication over a network using standard protocols http/https
		- Allow the exchange of data between different platforms and technologies (One code + one database = Multiple platforms)
		- We determine the protocol on pregiven data like:
	  
            - [SOAP] (Simple Object Access Protocol)
				- facilitate communication between different systems over a network, it provides a standarized way 
				- Message are formated using XML(eXtensive Markup Language) 
				- Message consists of SOAP envelop which contains a header and the body
				- <soap.envlop><emp><id>1</id><name>Yousef</name></emp></soap.envlop>
				- Soap have issues with mobile applications(mobile can't handle transferring data in xml file) 
					
            - [REST] (Representational State Transfer)   
				- A Software Architecture that imposes condition on how an API should work
				- Use HTTP/HTTPS to communicate, http have some constraint make it unique
				- Transfer data in JSON format (Light Weight)

[WSDL]
	- Web Services Description Language
	- A XML notation for describing a web service, the functionality offered by a web service 
	- Tells a client how to compose a web service request and describes the interface that is provided by the web service provider
	- Acts as a contract between the service provider and consumber, providing a standarized way to understand and interact with a web service 
	
[UDDL]
	- Universal Description, Discvery, and Intergration
	- is a specification that provides a standard way for businesses to publish and discover web services


[Class Library]	
	- A collection of compiled code (assemblies) that contains classes, interfaces, enums, and other types
	- It's a way to organize and package reusable code in a modular and maintainable manner
      
[DLL] (could be created from a class library)
    - Dynamic Link Library, contains compiled code that can be used by one or more programs (refrencing) .dll
    - Could be linked at runtime by multiple programs
    - It is like .exe an executable program but we can't run .dll directly


[WCF]
      - A framework developed by Microsoft for building service-oriented application
      - Its part from the .NET framework and provides       
      - Can communicate using various protocols HTTP, TCP, Named Pipes
      

[Types of Ecommerce]
      - [B2B] => Business-to-Business: Transactions between businesses; one business (web service) sells products or services to another, such as Amazon(web service) and Bank(anotehr web service) to validate the payment card of the customer.
      - [B2C] => Business-to-Consumer: Involves transactions between a business and individual consumers; a typical retail model, like when a customer purchases a product from an online store.
      - [C2C] => Consumer-to-Consumer: Describes transactions between individual consumers, often facilitated by online marketplaces where individuals sell to each other.


[Software Application Architectures]
      - Monolithic Architecture     (All-in-one Application)
      - Microservices Architecture
      - Three-Tier Architecture      (N-tier Architecture)

	- [Monolithic Architecture]
		  - Controllers
		  - Data (Data Access Logic)
		  - Models (UI Models)
		  - Services (Application Services [Interfaces and implementations])
		  - Views (Presentation Logic)
		  - Application Entry Point and Configuration
				- app.config
				- appsettings.json
				- bower.json
				- bundleconfig.json
				- Program.cs
				- Startup.cs
				
	- [N-tier Architecure] (multiple projects (Layers))     each one with a specific role in the application (all serve one application)
		  - ApplicationCore (Bussness/Application Model) [BLL]  => [Models / IRepos / DTOs]                                  
		  - Infrastructure (Data Access Logic) [DAL]                        => [Migrations / Repos]
		  - Web (Presentation Logic) [UI]                                         => Contains the controllers and view
		  - Tests (Automated Tests)
 
 
 
project name 
      asp.net core web api    restfull http
      
      .net 7
      no authentication type none or jwt
      no configure for https
      
      use controllers   minimal APIs => like microservice
      enable openAPI support     // will install package swashbuckle.appnetcore under the frameworks in the dependencies
what is swaagger?
      do not use top-level statments (to see the main fuction and program)
      
      
there is no wwwroot
if I want to add class library right click on dependencies


[code first]
      - create folder Models                                                 public int Id{get;set;}
      - install ef package    [ .sqlserver / .tools / .design ]    four ways [ ef name convention / data annotation / fluent api / external configuration ]
      
      In MVC EmployeeController inherits from Controller and controller inherits from baseController
      In API EmployeeController inherits from BaseController
      
[ApiController] attribute to let him know that this controller belongs to the MVC
[Route("api/[controller]")]   controller is a token place holder replacable with the name of the controller 
in API there is no default Route for him so we add the attribute of that controller 

there is a generic type for the action result ActionResult<List<Department>>

what is PostMan? 

[HttpGet]   // URL => domain /api/department ===> Get 
public IActionResult GetAll(){
      List<Department> dpts = db.Departments.ToList();
      if(dpets.Count > 0)
      {
            return OK(dpgs);
      }
      else
      {
            return Badrequest();
      }
}

we test on postman/thridller for the first time and then we test on swagger UI
[GttpGet("{id}")] let hiim know that there is an extra segment comming api/department/id  the id segment 

what is model binding ?

what is ModelState?

what is remote validation and ajax call?  $$$

return created in POST Verb

what is different between Find() and FirstOrDefault()
      - find takes primary key only must be unique
      - FirstOrDefault() search for anything whether it primary key or not
      
update is a method in .net 7

what is jwt? (Json Web Token)       like cookie


-------------  [ Day Two ] -------------

return Created()  parameter => string URL / Object
      - we could pass with the object sometihng that makes him able to get the place of the newly created object 
      - it return location for the object that we created 

Binding =>
      
      Url.Link()  parameter => RouteName / Object 
            - returns Url string so we can but it in the return created link segment beside the object 
            - to display or open the location of the newly created file 

      [HttpGet("{Id}"), Name ="GetOne"]
            - the route name for the action that contain this route is "GetOne"
            
      what is the purpose of the ModelBinder? in MVC and in API because there is a different
      ModelBinder=>
            - for Primitive DT => try to find it in the Route DAta / Query String
            - for Compolex DT  => try to find it in the Request body

      [FromBody]
            - when sending a data in the body in Post verb we can receive it by adding the attribute [FromBody] beside the param to let him look inside the body 
            - as long as we tell them a constraint that there is some thing in the body by adding from attribute it will return basd request if the data not found 

      [FromQuery]
            - here it will look to the query string and get the data fro mthe query string with Post Verb
            
      PostMan, Fiddler
            - postman is a composer and good for testing the binding

      IF WE SEND PARAMATER FOR AN OBJECT BUT NOT COMPLETED WE SENT TWO OUT OF THREE 
            - IN MVC IT WILL BIND IT WITH NULL 
            - IN API IT WILL THROW AN ERROR YOU MUST SEND THE SAME PARAMS OF THE OBJECT 

Json Serilization exception for the relational loading infinit cycle 
      - to fix it we can use [JsonIgnore] will not Serialized (not recommended solution)
      - DTO Data Transfer Object is the best practice solution (ViewModel)
            - we create new folder named DTOs and create class, not recommended to use complex data type, we use primitive datatype and then map on them
            - classes EmployeeWithDepartment
            
            
what is the different between find and ...
      
      we define a model for departmant that have a property for the name of the department and a list of string That I will map over the employees and add it to the list of string in the department
      
we're creating a service (provider)
      - now the user for that provider is the (consumer) that use this service (Front-End)
      
What is Ajax Call
      - why return Partial view and use the ajax call with it
      - remote validation 

What is CORS ?
      - app.UseCors(); => have three overloads 
      - builder.Services.AddCors(options=>{options.AddPolicy("MyPolicy", corsPolicyOptions(poption=>{
            poption.WithOrigins("domain").WithMethods("").WithHeaders("");
            
            }))});
we could create a folder called wwwroot and it will automatically take the shape 
      
      
wpf
      -async button_click event 
            - HttpClient httpclient = new HttpClient();
            - await httpclien.GetAsync("URL works with Verb GET");
                  - run the application to get the Url and use it in the previous method
            - HttpResponseMessage res = await httpclient.GetAsync("Url"); - this line instead of the previoud line 
            - if ( res.IsSuccessStatusCode){
                        string msg = await res.Content.ReadAsStringAsync();
                        // we can get the shape of the data that we receive and create the class with the same name of the comming data 
                        create a class that can receive the data and put the properties 
                        list<Departement> depts = JsonSerlizer.Deserialize<List<Department>>(msg);
                        DeptList.ItemSource = depts;
                  }
            
            
            
identity provider  IDP
Azure 
Blazor