Data structure
	- Definitino
		- A way of organizing and storing data in a computer to perform operation on that effieciently
	- Types
		- Primitive	=> Integers, Floats, Characters, etc		(basic)
		- Linear		=> Arrays, Linkedlists, Stacks, and Queues	(Arranged in linear order)
		- Non-linear	=> Trees, Graphs				(Not arranged in a squential manner)
		
	- Operation
		- Traversal 
		- Insertion
		- Deletion
		- Searching
		- Sorting
		- Merging
	
	- Array 		=> Access by Index	, 	fixed, inefficient insertion, deletion in the middle	
	- LinkedLists	=> Nodes and pointers	dynamic size, squential access, additional memory for pointers
	- Stack		=> LIFO			push, pop, peek(access top without removal)
	- Queues		=> FIFO			Enqueue, Dequeue, Front(Access Front element)
	- Trees		=> Hierarchial with root node	
	- Graphs		=> Nodes and edges
	- Hashing		=> Technique that maps data to a fixed-size array, 
	- Time and space Complexity	
		- Analyzing the efficiency of algorithms and data structures in terms of time and space complexity(amount of memory)
		- Big O Notation Expresses the worst-case scenario for how the runtime or space requirements of an algorithms grow as the input size increase 
	- Choosing the right data structure
		
- Solid Prniciples
	- Single Responsbility
		- A class should focus on doing one thing (one job or resopnsibility)
	- Open for Extension/Closed for Modification
		- A class should be open for extension and closed for modification
	- Liskov Substitution
		- Objects of a superclass should be replacable with objects of a subclass without affecting the correctness of the program
	- Interface Segregation Principle
		- A Client should never be forced to implement interfaces it does not use 
		- the Dependency of on class on another should be kept to the minimum necessary
	- Dependency Inversion Principle
		- High-Level modules should not depend on low-level modules but should depend on abstractions
		- Abstrctions should not depend on details, details should depend on abstractions
		
- OOP
	- Encapsulation
		- Is the bundling of data and methods that operate on that data into a single unit
		- Involves hiding the internal details of an object and exposing only what is necessary
		
	- Abstration
		- Is the process of simplifying complex systems by modeling classes based on the essential features while hiding the unnecessary details
	- Inheritance
		- Is a mechanism that allows a class(subclass or derived claas to inherit the properties and behaviors of another class )
		- Promotes code Reusability and establish is-a relationship
	- Polymorphism
		- Allow objects of different types to be treated as objects of a common base type 
		
		- Compile Time (Static )
			- Method Overloading
				- Methods with the same name but different in the signature 
			- Operator Overloading
				- Allow to redefine the behavior of operators for user-defined types
			- Compile-Time Decision
				- the specific method or operator to be called is determined at compile time based on the number and types of arguments
		- Run Time (Dynamic )
			- Method Overriding
				- this is a form of runtime polymorphism where a method in a base class is redefined in a derived class with the same signature
			- Polymorphism Behavior
				- The actual method called is determined by the type of the object at runtime 
				- This allows you to write code that can work with objects of a base class but will behave differently based on the actual derived class instance
			- Late Binding
				- The decision about which method to call is deferred until runtime allowing for greater flexibility
	
- Overload And Overwrite
- Abstract and interface Comaprison
- new, virtual, override

- What is Dependdency Injection
	- Injecting the dependencies into a class rather than creating them internally

- Async and Await
	- wait the method until it completes the execution
	- thread is free to do other work
	- non blocking, ensures that the method not block instead of waiting idly
	
- Struct is a value type whether we included a non-primitive type inside it or not

datatypes differents 

Design Pattern
	- Creational Patterns	=> Deals with object creation mechanisms
		- Singleton Pattern
			- Creational Design Pattern 
			- Single Creation for an object like static data or static resources
				- Like Configurations => Json file or xml file or database 
				- need to read it only onetime
				- if updated it's ok to restart the application to feel the changes (modifying configuration is something unique)
				
	- Structural Patterns	=> Focus on the composition of classes and object to create larger structures
		- Adapter Pattern
			- Structural pattern
			- Allows incompatible interfaces by converting the interface of a class into another interface that a client expects
			
	- Behavioral Patterns	=> Define how objects interact and communicate with each other 
		- 




	
	
		
		
		
		
		
		